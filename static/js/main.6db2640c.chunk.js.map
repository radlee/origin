{"version":3,"sources":["logo512.png","media/coding2.jpg","media/phone.png","media/onepointone.jpg","components/jumbotron/jumbotron.component.jsx","components/form/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","Jumbotron","fluid","className","Container","Button","color","Form","FormGroup","Label","for","Input","type","name","id","App","Row","Col","sm","Card","body","CardImg","top","width","src","originLogo","alt","CardBody","CardTitle","CardText","bmmLogo","coding","logo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6db2640c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo512.5abea531.png\";","module.exports = __webpack_public_path__ + \"static/media/coding2.2efb6a6d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/phone.48d21521.png\";","module.exports = __webpack_public_path__ + \"static/media/onepointone.9e0378da.jpg\";","import  React from 'react';\r\nimport { Jumbotron, Button, Container } from 'reactstrap';\r\n// import 'styles.component.css';\r\n\r\nexport default (props) => {\r\n    return (\r\n       \r\n        <Jumbotron fluid className=\"jumbotron\">\r\n            <Container fluid>\r\n                <h1 className=\"display-3\">ORIGIN<span className=\"span\">2020</span></h1>\r\n                <h2>CONTEMPORAY WEB DEVELOPMENT</h2>\r\n                <p className=\"lead\">From simple Portfolio-Profile pages to fully intercactive web services.</p>\r\n                <hr className=\"my-2\" />\r\n                <br />\r\n                <p className=\"paragraph\"><span className=\"span-tag\">Rad Responsive Web Applications. Built for Web and Mobile.</span></p>\r\n                <p className=\"lead\">\r\n                    <Button color=\"dark\">Get Started</Button>\r\n                </p>\r\n            </Container>\r\n        </Jumbotron>\r\n    \r\n    )\r\n}","import  React from 'react';\r\nimport {  Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\n// import 'styles.component.css';\r\n\r\nexport default (props) => {\r\n    return (\r\n\r\n        <div className=\"container\">\r\n            <br />\r\n            <h1 className=\"display-3\">Contact Us</h1>\r\n            <br />\r\n            <Form>\r\n                <FormGroup>\r\n                <Label for=\"ëxampleName\">Name</Label>\r\n                <Input \r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"exampleName\"\r\n                />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                <Label for=\"ëxampleSurname\">Subject</Label>\r\n                <Input \r\n                        type=\"text\"\r\n                        name=\"subject\"\r\n                        id=\"exampleSubject\"\r\n                />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                <Label for=\"ëxampleEmail\">Email</Label>\r\n                <Input \r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"exampleEmail\"\r\n                />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                <Label for=\"ëxampleEmail\">Message</Label>\r\n                <Input \r\n                        type=\"textarea\"\r\n                        name=\"email\"\r\n                        id=\"exampleEmail\"\r\n                />\r\n                </FormGroup>\r\n                <Button color=\"dark\">Submit</Button>\r\n            </Form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport logo from './logo512.png';\nimport originLogo from './media/coding2.jpg';\nimport bmmLogo from './media/phone.png';\nimport coding from './media/onepointone.jpg';\nimport './App.css';\nimport Jumbotron from './components/jumbotron/jumbotron.component';\nimport Form from './components/form/form.component';\nimport { Container, Row, Col, Card, Button, Badge, CardImg, CardTitle, CardText, CardBody, CardSubtitle, CardImgOverlay } from 'reactstrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Jumbotron />\n      \n      <Container className=\"section2\">\n\n      <br />\n\n      <h1 className=\"display-3\">Portfolio-2020</h1>\n\n      <br />\n      \n      <Row>\n\n        <Col sm=\"4\">\n          <Card body>\n            <CardImg className=\"CardImg\" top width=\"100%\" src={originLogo} alt=\"one\" />      \n            <CardBody>\n            <br />\n              <CardTitle>Programming Basics and Games</CardTitle>\n              <CardText>Introduction to Programming Project for Primary and High School </CardText>\n            </CardBody>   \n          </Card>\n        </Col>\n\n          <Col sm=\"4\">\n            <Card body>\n              <CardImg className=\"CardImg\" top width=\"100%\" src={bmmLogo} alt=\"one\" />\n              <CardBody>\n                <br />\n                <CardTitle >Mobile-1st is the top Priority</CardTitle>\n                <CardText>Responsive web apps in the midst of 2020 </CardText>\n            </CardBody>  \n              </Card>\n            </Col>\n\n            <Col sm=\"4\">\n              <Card body>\n                  <CardImg className=\"CardImg\" top width=\"100%\" src={coding} alt=\"one\" />\n                  <CardBody>\n                  <br />\n                    <CardTitle>Professional Photography</CardTitle>\n                    <CardText>\"Qaulity images makes your online precence have an impact. </CardText>\n                  </CardBody>  \n              </Card>\n            </Col>\n\n        </Row>\n     \n      </Container>\n\n      <br/>\n\n      <Form />\n\n      <br />\n\n      <img src={logo} className=\"App-logo-rotate\" alt=\"logo\" />\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}